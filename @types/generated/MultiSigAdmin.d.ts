/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MultiSigAdminContract
  extends Truffle.Contract<MultiSigAdminInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MultiSigAdminInstance>;
}

export interface AdminAdded {
  name: "AdminAdded";
  args: {
    admin: string;
    0: string;
  };
}

export interface AdminRemoved {
  name: "AdminRemoved";
  args: {
    admin: string;
    0: string;
  };
}

export interface ConfigurationChanged {
  name: "ConfigurationChanged";
  args: {
    targetContract: string;
    selector: string;
    admin: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface ConfigurationRemoved {
  name: "ConfigurationRemoved";
  args: {
    targetContract: string;
    selector: string;
    admin: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface ProposalApprovalRescinded {
  name: "ProposalApprovalRescinded";
  args: {
    id: BN;
    approver: string;
    0: BN;
    1: string;
  };
}

export interface ProposalApprovalSubmitted {
  name: "ProposalApprovalSubmitted";
  args: {
    id: BN;
    approver: string;
    0: BN;
    1: string;
  };
}

export interface ProposalClosed {
  name: "ProposalClosed";
  args: {
    id: BN;
    closer: string;
    0: BN;
    1: string;
  };
}

export interface ProposalCreated {
  name: "ProposalCreated";
  args: {
    id: BN;
    proposer: string;
    0: BN;
    1: string;
  };
}

export interface ProposalExecuted {
  name: "ProposalExecuted";
  args: {
    id: BN;
    executor: string;
    0: BN;
    1: string;
  };
}

type AllEvents =
  | AdminAdded
  | AdminRemoved
  | ConfigurationChanged
  | ConfigurationRemoved
  | OwnershipTransferred
  | ProposalApprovalRescinded
  | ProposalApprovalSubmitted
  | ProposalClosed
  | ProposalCreated
  | ProposalExecuted;

export interface MultiSigAdminInstance extends Truffle.ContractInstance {
  /**
   * Add new admins
   * @param accounts Addresses of the new admins to add
   */
  addAdmins: {
    (accounts: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      accounts: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      accounts: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      accounts: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * List of admins
   */
  getAdmins(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  /**
   * Check whether a given address is of an admin
   * @param account Address to check
   */
  isAdmin(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Remove existing admins
   * @param accounts Addresses of the admins to remove
   */
  removeAdmins: {
    (accounts: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      accounts: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      accounts: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      accounts: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Disable renounceOwnership() in Ownable
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * minApprovals must be greater than zero.
   * Configure who can approve and how many approvals are required for a given type of contract call
   * @param approvers List of approvers' addresses
   * @param minApprovals Minimum number of approvals required
   * @param selector Selector of the function in the contract
   * @param targetContract Address of the contract
   */
  configure: {
    (
      targetContract: string,
      selector: string,
      minApprovals: number | BN | string,
      approvers: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      targetContract: string,
      selector: string,
      minApprovals: number | BN | string,
      approvers: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      targetContract: string,
      selector: string,
      minApprovals: number | BN | string,
      approvers: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      targetContract: string,
      selector: string,
      minApprovals: number | BN | string,
      approvers: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Remove configuration for a given type of contract call
   * @param selector Selector of the function in the contract
   * @param targetContract Address of the contract
   */
  removeConfiguration: {
    (
      targetContract: string,
      selector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      targetContract: string,
      selector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      targetContract: string,
      selector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      targetContract: string,
      selector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Only approvers for a given type of contract call are able to propose. Emits the proposal ID in ProposalCreated event.
   * Propose a contract call
   * @param argumentData ABI-encoded argument data
   * @param selector Selector of the function in the contract
   * @param targetContract Address of the contract
   */
  propose: {
    (
      targetContract: string,
      selector: string,
      argumentData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      targetContract: string,
      selector: string,
      argumentData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      targetContract: string,
      selector: string,
      argumentData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      targetContract: string,
      selector: string,
      argumentData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * This can only be called by the proposer.
   * Close a proposal without executing
   * @param proposalId Proposal
   */
  closeProposal: {
    (
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Only the approvers for the type of contract call specified in the proposal are able to submit approvals.
   * Submit an approval for a proposal
   * @param proposalId Proposal ID
   */
  approve: {
    (
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Approvals can only be rescinded while the proposal is still open.
   * Rescind a previously submitted approval
   * @param proposalId Proposal ID
   */
  rescindApproval: {
    (
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Required number of approvals must have been met; only the approvers for a given type of contract call proposed are able to execute.
   * Execute an approved proposal
   * @param proposalId Proposal ID
   */
  execute: {
    (
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * A convenience function to cast the final approval required and execute the contract call. Same as doing approve() followed by execute().
   * @param proposalId Proposal ID
   */
  approveAndExecute: {
    (
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * This works only if the number of approvals required is one (1).
   * A convenience function to create a proposal and execute immediately. Same as doing propose() followed by approve() and execute().
   * @param argumentData ABI-encoded argument data
   * @param selector Selector of the function in the contract
   * @param targetContract Address of the contract
   */
  proposeAndExecute: {
    (
      targetContract: string,
      selector: string,
      argumentData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      targetContract: string,
      selector: string,
      argumentData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      targetContract: string,
      selector: string,
      argumentData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      targetContract: string,
      selector: string,
      argumentData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Minimum number of approvals required for a given type of contract call
   * @param selector Selector of the function in the contract
   * @param targetContract Address of the contract
   */
  getMinApprovals(
    targetContract: string,
    selector: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * List of approvers for a given type of contract call
   * @param selector Selector of the function in the contract
   * @param targetContract Address of the contract
   */
  getApprovers(
    targetContract: string,
    selector: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * Whether a given account is configured to be able to approve a given type of contract call
   * @param account Address of the account to check
   * @param selector Selector of the function in the contract
   * @param targetContract Address of the contract
   */
  isApprover(
    targetContract: string,
    selector: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * List of IDs of open proposals for a given type of contract call
   * @param selector Selector of the function in the contract
   * @param targetContract Address of the contract
   */
  getOpenProposals(
    targetContract: string,
    selector: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  /**
   * Number of approvals received for a given proposal
   * @param proposalId Proposal ID
   */
  getNumApprovals(
    proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Approvers who have rescinded their approvals are not included.
   * List of approvers that have approved a given proposal
   * @param proposalId Proposal ID
   */
  getApprovals(
    proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * Whether a proposal has received required number of approvals
   * @param proposalId Proposal ID
   */
  isExecutable(
    proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * False if the approval was rescinded.
   * Whether an approver has already approved a proposal
   * @param approver Approver's address
   * @param proposalId Proposal ID
   */
  hasApproved(
    proposalId: number | BN | string,
    approver: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * State of a given proposal
   * @param proposalId Proposal ID
   */
  getProposalState(
    proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Proposer of a given proposal
   * @param proposalId Proposal ID
   */
  getProposer(
    proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Target contract address of a given proposal
   * @param proposalId Proposal ID
   */
  getTargetContract(
    proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Target function selector of a given proposal
   * @param proposalId Proposal ID
   */
  getSelector(
    proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Call argument data of a given proposal
   * @param proposalId Proposal ID
   */
  getArgumentData(
    proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  methods: {
    /**
     * Add new admins
     * @param accounts Addresses of the new admins to add
     */
    addAdmins: {
      (accounts: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        accounts: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        accounts: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        accounts: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * List of admins
     */
    getAdmins(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    /**
     * Check whether a given address is of an admin
     * @param account Address to check
     */
    isAdmin(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Remove existing admins
     * @param accounts Addresses of the admins to remove
     */
    removeAdmins: {
      (accounts: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        accounts: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        accounts: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        accounts: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Disable renounceOwnership() in Ownable
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * minApprovals must be greater than zero.
     * Configure who can approve and how many approvals are required for a given type of contract call
     * @param approvers List of approvers' addresses
     * @param minApprovals Minimum number of approvals required
     * @param selector Selector of the function in the contract
     * @param targetContract Address of the contract
     */
    configure: {
      (
        targetContract: string,
        selector: string,
        minApprovals: number | BN | string,
        approvers: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        targetContract: string,
        selector: string,
        minApprovals: number | BN | string,
        approvers: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        targetContract: string,
        selector: string,
        minApprovals: number | BN | string,
        approvers: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        targetContract: string,
        selector: string,
        minApprovals: number | BN | string,
        approvers: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Remove configuration for a given type of contract call
     * @param selector Selector of the function in the contract
     * @param targetContract Address of the contract
     */
    removeConfiguration: {
      (
        targetContract: string,
        selector: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        targetContract: string,
        selector: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        targetContract: string,
        selector: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        targetContract: string,
        selector: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Only approvers for a given type of contract call are able to propose. Emits the proposal ID in ProposalCreated event.
     * Propose a contract call
     * @param argumentData ABI-encoded argument data
     * @param selector Selector of the function in the contract
     * @param targetContract Address of the contract
     */
    propose: {
      (
        targetContract: string,
        selector: string,
        argumentData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        targetContract: string,
        selector: string,
        argumentData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        targetContract: string,
        selector: string,
        argumentData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        targetContract: string,
        selector: string,
        argumentData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * This can only be called by the proposer.
     * Close a proposal without executing
     * @param proposalId Proposal
     */
    closeProposal: {
      (
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Only the approvers for the type of contract call specified in the proposal are able to submit approvals.
     * Submit an approval for a proposal
     * @param proposalId Proposal ID
     */
    approve: {
      (
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Approvals can only be rescinded while the proposal is still open.
     * Rescind a previously submitted approval
     * @param proposalId Proposal ID
     */
    rescindApproval: {
      (
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Required number of approvals must have been met; only the approvers for a given type of contract call proposed are able to execute.
     * Execute an approved proposal
     * @param proposalId Proposal ID
     */
    execute: {
      (
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * A convenience function to cast the final approval required and execute the contract call. Same as doing approve() followed by execute().
     * @param proposalId Proposal ID
     */
    approveAndExecute: {
      (
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * This works only if the number of approvals required is one (1).
     * A convenience function to create a proposal and execute immediately. Same as doing propose() followed by approve() and execute().
     * @param argumentData ABI-encoded argument data
     * @param selector Selector of the function in the contract
     * @param targetContract Address of the contract
     */
    proposeAndExecute: {
      (
        targetContract: string,
        selector: string,
        argumentData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        targetContract: string,
        selector: string,
        argumentData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        targetContract: string,
        selector: string,
        argumentData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        targetContract: string,
        selector: string,
        argumentData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Minimum number of approvals required for a given type of contract call
     * @param selector Selector of the function in the contract
     * @param targetContract Address of the contract
     */
    getMinApprovals(
      targetContract: string,
      selector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * List of approvers for a given type of contract call
     * @param selector Selector of the function in the contract
     * @param targetContract Address of the contract
     */
    getApprovers(
      targetContract: string,
      selector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * Whether a given account is configured to be able to approve a given type of contract call
     * @param account Address of the account to check
     * @param selector Selector of the function in the contract
     * @param targetContract Address of the contract
     */
    isApprover(
      targetContract: string,
      selector: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * List of IDs of open proposals for a given type of contract call
     * @param selector Selector of the function in the contract
     * @param targetContract Address of the contract
     */
    getOpenProposals(
      targetContract: string,
      selector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    /**
     * Number of approvals received for a given proposal
     * @param proposalId Proposal ID
     */
    getNumApprovals(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Approvers who have rescinded their approvals are not included.
     * List of approvers that have approved a given proposal
     * @param proposalId Proposal ID
     */
    getApprovals(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * Whether a proposal has received required number of approvals
     * @param proposalId Proposal ID
     */
    isExecutable(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * False if the approval was rescinded.
     * Whether an approver has already approved a proposal
     * @param approver Approver's address
     * @param proposalId Proposal ID
     */
    hasApproved(
      proposalId: number | BN | string,
      approver: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * State of a given proposal
     * @param proposalId Proposal ID
     */
    getProposalState(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Proposer of a given proposal
     * @param proposalId Proposal ID
     */
    getProposer(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Target contract address of a given proposal
     * @param proposalId Proposal ID
     */
    getTargetContract(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Target function selector of a given proposal
     * @param proposalId Proposal ID
     */
    getSelector(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Call argument data of a given proposal
     * @param proposalId Proposal ID
     */
    getArgumentData(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
